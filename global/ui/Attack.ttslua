-- store the type of damage done by a player
Attack = {
    damage_player = {},
    targets = {},
    hits = {},
    covers = {}
}

local SELECTED_COLOR = "#808080"
local NOT_SELECTED_COLOR = "#FFFFFF"

function Attack.create(player_color)

    Attack.reset(player_color)

    local panel = {
        tag = "Panel",
        attributes = {
            id = "panel_damage_" .. player_color,
            visibility = player_color,
            active = false,
            height = 540,
            width = 750,
            allowDragging = "true",
            returnToOriginalPositionWhenReleased = "false",
            restrictDraggingToParentBounds = false,
            scale = "0.5 0.5 0.5",
            position = "0 0 0",
            color = "#AAAAAA"
        },
        children = {
            -- header
            {
                tag = "Text",
                attributes = {
                    text = "Damage",
                    fontSize = 70,
                    position = "-225 -73 0"
                }
            },
            -- Damage value
            {
                tag = "InputField",
                attributes = {
                    width = 175,
                    height = 100,
                    text = "0",
                    fontSize = 70,
                    position = "-263 -197 0",
                    onEndEdit = "Attack_change_damage"
                }
            },
            -- Attack button
            {
                tag = "Button",
                attributes = {
                    text = "OK",
                    fontSize = 60,
                    width = 100,
                    height = 100,
                    position = "-105 -197 0",
                    onClick = "Attack_compute"
                }
            },
            -- header
            {
                tag = "Text",
                attributes = {
                    text = "Precision",
                    fontSize = 70,
                    position = "-225 197 0"
                }
            },
            -- precision value
            {
                tag = "InputField",
                attributes = {
                    id = "precision_" .. player_color,
                    width = 175,
                    height = 100,
                    text = "0",
                    fontSize = 70,
                    position = "-263 73 0",
                    onEndEdit = "Attack_change_precision"
                }
            },
            -- precision button
            {
                tag = "Button",
                attributes = {
                    text = "",
                    fontSize = 60,
                    width = 100,
                    height = 100,
                    position = "-105 73 0",
                    onClick = "Attack_toggle_cover"
                },
                children = {
                    {
                        tag = "Image",
                        attributes = {
                            id = "image_cover_" .. player_color,
                            image = "cover",
                            width = 80,
                            height = 80,
                            preserveAspect = true,
                        }
                    }
                }
            },
        }
    }

    local list_pos = {
        { 50, -73 },
        { 175, -73 },
        { 300, -73 },
        { 50, -197 },
        { 175, -197 },
        { 300, -197 },
    }
    for i, pos in ipairs(list_pos) do
        local position = pos[1] .. " " .. pos[2] .. " 0"
        local damage_type = Constant.DAMAGES[i]
        local color = NOT_SELECTED_COLOR
        if damage_type == IMPACT then
            color = SELECTED_COLOR
        end
        table.insert(panel["children"], {
            tag = "Button",
            attributes = {
                id = "damage_" .. damage_type .. "_" .. player_color,
                width = 100,
                height = 100,
                icon = Constant[damage_type].image,
                tooltip = Constant[damage_type].text,
                iconColor = Constant[damage_type].color,
                position = position,
                onClick = "Attack_damage_type(" .. damage_type .. ")",
                color = color,
            }
        })
    end

    local target_panel = {
        tag = "Panel",
        attributes = {
            width = 400,
            height = 270,
            position = "175 135 0",
            color = "#AAAAAA",
        },
        children = {
            {
                tag = "TableLayout",
                attributes = {
                    columnWidths = "230 50 50 50",
                },
                children = {
                    {
                        tag = "Row",
                        attributes = {
                            preferredHeight = 50,
                        },

                        children = {
                            {
                                tag = "Cell",
                                children = {
                                    {
                                        tag = "Text",
                                        attributes = {
                                            text = "Nom",
                                            fontSize = 40,
                                            fontColor = "#000000",
                                            alignment = "MiddleCenter",
                                            resizeTextForBestFit = true,
                                        }
                                    },
                                }
                            },
                            {
                                tag = "Cell",
                                children = {
                                    {
                                        tag = "Image",
                                        attributes = {
                                            image = "evasion",
                                            color = "#121212",
                                            preserveAspect = true,
                                        }
                                    }
                                }
                            },
                            {
                                tag = "Cell",
                                children = {
                                    {
                                        tag = "Image",
                                        attributes = {
                                            image = "cover",
                                            preserveAspect = true,
                                        }
                                    }
                                }
                            },
                            {
                                tag = "Cell",
                                children = {
                                    {
                                        tag = "Text",
                                        attributes = {
                                            text = "H",
                                            fontSize = 40,
                                        }
                                    }
                                }
                            },
                        }
                    }
                }
            }
        }
    }
    local vertical_scroll = {
        tag = "VerticalScrollView",
        attributes = {
            position = "0 -25 0",
            width = 400,
            height = 220,
        },
        children = {
            {
                tag = "TableLayout",
                attributes = {
                    columnWidths = "230 50 50 50",
                },
                children = {
                }
            }
        }
    }
    local vertical_layout = vertical_scroll["children"][1]
    -- add vertical_scroll to target target_panel
    table.insert(target_panel["children"], vertical_scroll)
    -- add target_panel to attack panel
    table.insert(panel["children"], target_panel)

    for guid, character in pairs(MainUI.characters) do
        local cover_bonus = "+2"
        local row = {
            tag = "Row",
            attributes = {
                id = "target_row_" .. player_color .. "_" .. guid,
                preferredHeight = 50,
            },

            children = {
                {
                    tag = "Cell",
                    children = {
                        {
                            tag = "Text",
                            attributes = {
                                text = character.get("NAME"),
                                fontSize = 40,
                                color = "#000000",
                                alignment = "MiddleLeft",
                                resizeTextForBestFit = true,
                            }
                        },
                    }
                },
                {
                    tag = "Cell",
                    children = {
                        {
                            tag = "Text",
                            attributes = {
                                text = character.get("EVASION"),
                                fontSize = 40,
                            }
                        }
                    }
                },
                {
                    tag = "Cell",
                    children = {
                        {
                            tag = "Text",
                            attributes = {
                                id = "target_cover_" .. player_color .. "_" .. guid,
                                text = cover_bonus,
                                color = "#00BBCC",
                                fontSize = 40,
                            }
                        }
                    }
                },
                {
                    tag = "Cell",
                    children = {
                        {
                            tag = "Button",
                            attributes = {
                                id = "target_button_" .. player_color .. "_" .. guid,
                                onClick = "Attack_toggle_target(" .. guid .. ")",
                                text = "X",
                                fontSize = 30,
                            }
                        }
                    }
                },
            }
        }

        table.insert(vertical_layout["children"], row)

    end
    table.insert(panel["children"], {
        tag = "Button",
        attributes = {
            fontSize = 40,
            color = "#DDDDDD",
            width = 60,
            height = 60,
            position = "375 270 -20",
            onclick = "Attack_hide()",
            text = "X",
        }
    })

    return panel
end

function Attack.reset_round()
    -- Key damage information, it could be easier
    for _, player in ipairs(Player.getPlayers()) do
        -- still reset any target
        if Attack.damage_player[player.color] ~= nil then
            Attack.damage_player[player.color]["guid"] = nil
        end
    end
end

function Attack.reset(player_color)
    Attack.damage_player[player_color] = {
        guid = nil,
        damage = 0,
        precision = 0,
        use_cover = true,
        IMPACT = true,
        FIRE = false,
        COLD = false,
        ELECTRIC = false,
        BLIGHT = false,
        DIRECT = false,
    }
    Attack.targets[player_color] = {}
    Attack.hits[player_color] = {}
    Attack.covers[player_color] = {}
end

function Attack.set_targets(player_color, targets)
    Attack.targets[player_color] = targets
    -- first disable all miniature
    for guid, _ in pairs(MainUI.characters) do
        self.UI.setAttribute("target_row_" .. player_color .. "_" .. guid, "active", false)
        Attack.hits[player_color][guid] = true
        self.UI.setAttribute("target_button_" .. player_color .. "_" .. guid, "text", "X")

    end
    -- first disable all miniature
    for _, guid in ipairs(targets) do
        self.UI.setAttribute("target_row_" .. player_color .. "_" .. guid, "active", true)
    end
    -- display the Attack panel
    self.UI.setAttribute("panel_damage_" .. player_color, "active", true)
    -- set die callback to catch the precision roll
    PlayerDie.set_callback(player_color, Global, "Attack_set_precision")
    -- Update the covers
    Attack.update_covers(player_color)
end

function Attack.update_covers(player_color)
    -- Get the cover definition for all these miniatures
    local selected_guid = Action.selected_character[player_color].get("guid")
    local covers = MainUI.board_object.call("LoS_get_cover", { selected_guid })
    for guid, cover_value in pairs(covers) do
        if cover_value > 0 then
            cover_value = "+" .. tostring(cover_value * COVER_BONUS)
        else
            cover_value = ""
        end
        self.UI.setAttribute("target_cover_" .. player_color .. "_" .. guid, "text", cover_value)
    end
    Attack.covers[player_color] = covers
end

function Attack.compute_precision(player_color)
    -- get the precision from the damage definition
    local precision = Attack.damage_player[player_color]["precision"]
    -- Check which miniature is hit or not
    for _, guid in ipairs(Attack.targets[player_color]) do
        local character = MainUI.characters[guid]
        local evasion = character.get("EVASION")
        if Attack.damage_player[player_color]["use_cover"] then
            evasion = evasion + Attack.covers[player_color][character.getGUID()] * COVER_BONUS
        end
        if evasion < precision then
            Attack.hits[player_color][character.getGUID()] = true
            self.UI.setAttribute("target_button_" .. player_color .. "_" .. character.getGUID(), "text", "X")
        else
            Attack.hits[player_color][character.getGUID()] = false
            self.UI.setAttribute("target_button_" .. player_color .. "_" .. character.getGUID(), "text", "")
        end
    end
end

function Attack.set_precision(player_color, precision, _)
    -- store the precision in the attack
    Attack.damage_player[player_color]["precision"] = precision
    -- refresh the precision display
    self.UI.setAttribute("precision_" .. player_color, "text", precision)
    -- compute precision
    Attack.compute_precision(player_color)
end

-- Click events
function Attack_update(player_color)
    for _, damage_type in ipairs(Constant.DAMAGES) do
        local id = "damage_" .. damage_type .. "_" .. player_color
        if Attack.damage_player[player_color][damage_type] then
            self.UI.setAttribute(id, "color", SELECTED_COLOR)
        else
            self.UI.setAttribute(id, "color", NOT_SELECTED_COLOR)
        end
    end
end

function Attack_character(player, guid)
    local player_color = player.color
    -- set the miniature
    Attack.set_targets(player_color, { guid })

    -- Toggle on/off the panel
    if Attack.damage_player[player_color]["guid"] == nil then
        Attack.damage_player[player_color]["guid"] = guid
        self.UI.setAttribute("panel_damage_" .. player_color, "active", true)
    elseif Attack.damage_player[player_color]["guid"] ~= guid then
        Attack.damage_player[player_color]["guid"] = guid
        self.UI.setAttribute("panel_damage_" .. player_color, "active", true)
    else
        Attack.damage_player[player_color]["guid"] = nil
        self.UI.setAttribute("panel_damage_" .. player_color, "active", false)
    end
end

function Attack_damage_type(player, damage_type)
    if damage_type == DIRECT then
        Attack.damage_player[player.color][DIRECT] = not Attack.damage_player[player.color][DIRECT]
        Attack.damage_player[player.color][IMPACT] = not Attack.damage_player[player.color][DIRECT]
        Attack.damage_player[player.color][FIRE] = false
        Attack.damage_player[player.color][COLD] = false
        Attack.damage_player[player.color][ELECTRIC] = false
        Attack.damage_player[player.color][BLIGHT] = false
    else
        Attack.damage_player[player.color][DIRECT] = false
        Attack.damage_player[player.color][damage_type] = not Attack.damage_player[player.color][damage_type]
        local one_selected = false
        for _, damage_type2 in ipairs(Constant.DAMAGES) do
            one_selected = one_selected or Attack.damage_player[player.color][damage_type2]
            -- still no break ...
        end
        if not one_selected then
            Attack.damage_player[player.color][DIRECT] = true
        end
    end
    Attack_update(player.color)
end

function Attack_toggle_target(player, guid)
    local text = "X"
    Attack.hits[player.color][guid] = not Attack.hits[player.color][guid]
    if not Attack.hits[player.color][guid] then
        text = ""
    end
    print("player_color: " .. player.color .. " guid: " .. guid)

    self.UI.setAttribute("target_button_" .. player.color .. "_" .. guid, "text", text)
end

-- callable
function Attack_set_targets(params)
    Attack.set_targets(table.unpack(params))
end

function Attack_change_damage(player, value, _)
    Attack.damage_player[player.color]["damage"] = value

end

function Attack_change_precision(player, value, _)
    Attack.damage_player[player.color]["precision"] = tonumber(value)
    Attack.compute_precision(player.color)
end

function Attack_compute(player)
    local player_color = player.color
    print("player launching attack: " .. player_color)
    print("damage: " .. Attack.damage_player[player_color]["damage"])
    print("IMPACT: " .. tostring(Attack.damage_player[player_color]["IMPACT"]))
    print("FIRE: " .. tostring(Attack.damage_player[player_color]["FIRE"]))
    print("COLD: " .. tostring(Attack.damage_player[player_color]["COLD"]))
    print("ELECTRIC: " .. tostring(Attack.damage_player[player_color]["ELECTRIC"]))
    print("BLIGHT: " .. tostring(Attack.damage_player[player_color]["BLIGHT"]))
    print("DIRECT: " .. tostring(Attack.damage_player[player_color]["DIRECT"]))
    print("To targets: ")
    for _, character in ipairs(Attack.targets[player_color]) do
        if Attack.hits[player_color][character.getGUID()] then
            print(character["NAME"])
        end
    end
end

function Attack_set_precision(params)
    Attack.set_precision(table.unpack(params))
end

function Attack_toggle_cover(player)
    Attack.damage_player[player.color]["use_cover"] = not Attack.damage_player[player.color]["use_cover"]
    local image = "cover"
    if not Attack.damage_player[player.color]["use_cover"] then
        image = "nocover"
    end
    self.UI.setAttribute("image_cover_" .. player.color, "image", image)
    Attack.compute_precision(player.color)
end

function Attack_hide(player)
    self.UI.setAttribute("panel_damage_" .. player.color, "active", false)
    Attack.damage_player[player.color]["guid"] = nil
end

return Attack