-- store the type of damage done by a player
Attack = {
    damage_player = {}
}

local SELECTED_COLOR = "#808080"
local NOT_SELECTED_COLOR = "#FFFFFF"

function Attack.create(player_color)

    Attack.reset(player_color)

    local panel = {
        tag = "Panel",
        attributes = {
            id = "panel_damage_" .. player_color,
            visibility = player_color,
            active = false,
            height = 270,
            width = 750,
            allowDragging = "true",
            returnToOriginalPositionWhenReleased = "false",
            scale = "0.5 0.5 0.5",
            position = "0 0 0",
            color = "#AAAAAA"
        },
        children = {
            -- header
            {
                tag = "Text",
                attributes = {
                    text = "Damage",
                    fontSize = 70,
                    position = "-225 62 0"
                }
            },
            -- Damage value
            {
                tag = "InputField",
                attributes = {
                    width = 175,
                    height = 100,
                    text = "0",
                    fontSize = 70,
                    position = "-263 -62 0"
                }
            },
            -- Attack button
            {
                tag = "Button",
                attributes = {
                    text = "OK",
                    fontSize = 60,
                    width = 100,
                    height = 100,
                    position = "-105 -62 0"
                }
            }
        }
    }

    local list_pos = {
        { 50, 62 },
        { 175, 62 },
        { 300, 62 },
        { 50, -62 },
        { 175, -62 },
        { 300, -62 },
    }
    for i, pos in ipairs(list_pos) do
        local position = pos[1] .. " " .. pos[2] .. " 0"
        local damage_type = Constant.DAMAGES[i]
        local color = NOT_SELECTED_COLOR
        if damage_type == IMPACT then
            color = SELECTED_COLOR
        end
        table.insert(panel["children"], {
            tag = "Button",
            attributes = {
                id = "damage_" .. damage_type .. "_" .. player_color,
                width = 100,
                height = 100,
                icon = Constant[damage_type].image,
                tooltip = Constant[damage_type].text,
                iconColor = Constant[damage_type].color,
                position = position,
                onClick = "Attack_damage_type(" .. damage_type .. ")",
                color = color,
            }
        })
    end

    return panel
end

function Attack.reset_round()
    -- Key damage information, it could be easier
    for _, player in ipairs(Player.getPlayers()) do
        -- still reset any target
        Attack.damage_player[player.color]["guid"] = nil
    end
end

function Attack.reset(player_color)
    Attack.damage_player[player_color] = {
        guid = nil,
        damage = 0,
        IMPACT = true,
        FIRE = false,
        COLD = false,
        ELECTRIC = false,
        BLIGHT = false,
        DIRECT = false,
    }
end

-- Click events
function Attack_update(player_color)

    for _, damage_type in ipairs(Constant.DAMAGES) do
        local id = "damage_" .. damage_type .. "_" .. player_color
        if Attack.damage_player[player_color][damage_type] then
            self.UI.setAttribute(id, "color", SELECTED_COLOR)
        else
            self.UI.setAttribute(id, "color", NOT_SELECTED_COLOR)
        end
    end
end

function Attack_character(player, guid)
    local player_color = player.color
    if Attack.damage_player[player_color]["guid"] == nil then
        Attack.damage_player[player_color]["guid"] = guid
        self.UI.setAttribute("panel_damage_" .. player_color, "active", true)
    elseif Attack.damage_player[player_color]["guid"] ~= guid then
        Attack.damage_player[player_color]["guid"] = guid
        self.UI.setAttribute("panel_damage_" .. player_color, "active", true)
    else
        Attack.damage_player[player_color]["guid"] = nil
        self.UI.setAttribute("panel_damage_" .. player_color, "active", false)
    end
end

function Attack_damage_type(player, damage_type)
    if damage_type == DIRECT then
        Attack.damage_player[player.color][DIRECT] = not Attack.damage_player[player.color][DIRECT]
        Attack.damage_player[player.color][IMPACT] = not Attack.damage_player[player.color][DIRECT]
        Attack.damage_player[player.color][FIRE] = false
        Attack.damage_player[player.color][COLD] = false
        Attack.damage_player[player.color][ELECTRIC] = false
        Attack.damage_player[player.color][BLIGHT] = false
    else
        Attack.damage_player[player.color][DIRECT] = false
        Attack.damage_player[player.color][damage_type] = not Attack.damage_player[player.color][damage_type]
        local one_selected = false
        for _, damage_type2 in ipairs(Constant.DAMAGES) do
            one_selected = one_selected or Attack.damage_player[player.color][damage_type2]
            -- still no break ...
        end
        if not one_selected then
            Attack.damage_player[player.color][DIRECT] = true
        end
    end
    Attack_update(player.color)
end

return Attack