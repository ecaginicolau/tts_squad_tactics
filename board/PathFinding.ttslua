--------------------------------------
--- Store and calculate the Pathfinding for every miniature

-- No local, make it a global
PathFinding = {
    cache = {}
}

function PathFinding.check_hinder(guid, x, y)

    -- if no team at this tile no need to go further
    if #(Board.coordinate_team[y][x]) == 0 then
        return false
    end
    local team = Board.miniatures[guid]["team"]
    -- check if another team than this one if found in this tile
    for _, other_team in ipairs(Board.coordinate_team[y][x]) do
        if other_team ~= team then
            return true
        end
    end
    -- if nothing up to here it means only allies have been found
    return false
end

function PathFinding.calculate(guid, nb_move, safe)
    if safe == nil then
        safe = false
    end
    if nb_move == nil then
        nb_move = Constant.MAX_MOVE
    end
    -- This store the move cost for every tile
    local current_pathfinding = {}

    -- initialise it to 99, unreachable
    for i = 1, Board.size_y, 1 do
        current_pathfinding[i] = {}
        for j = 1, Board.size_x, 1 do
            current_pathfinding[i][j] = 99 -- a number bigger than Constant.MAX_MOVE, because nil delete the tab index in LUA ...
        end
    end

    -- should try to make a coroutine somehow (not sure both recursive and coroutine)
    function calculate_rec(tile_x, tile_y, cost, diagonal)
        -- exit condition, out of the board, out of move
        if not Board.is_inside({tile_x, tile_y}) then
            return
        end

        local tile_value = Board.data[tile_y][tile_x]

        -- exit condition, can't walk on this tile
        if Constant[tile_value].move_cost == 0 then
            -- no move_cost = not walkable
            return
        end

        -- Get the cost for this tile
        local current_cost = Constant[tile_value].move_cost

        -- Multiply it if it's a diagonal
        if diagonal then
            current_cost = current_cost * 1.4 -- 1.4 for the diagonal
        end

        cost = cost + current_cost

        -- another exit condition, the cost is greater than the available move nb
        if cost > nb_move then
            return
        end

        if not safe then
            -- make sure there is no other miniature hindering
            if PathFinding.check_hinder(guid, tile_x, tile_y) then
                -- set this as the last possible tile we can go
                current_pathfinding[tile_y][tile_x] = nb_move
                -- no need to continue from this tile
                return
            end
        end


        -- If this path is faster than previously calculated path
        if current_pathfinding[tile_y][tile_x] > cost then
            -- Store the new path cost
            current_pathfinding[tile_y][tile_x] = cost
            -- Continue this path in every directions
            for _, direction in ipairs(Constant.DIRECTIONS) do
                calculate_rec(tile_x + direction[1], tile_y + direction[2], cost, direction[3])
            end
        end
    end

    -- Call the pathfinding at the starting position
    local coordinate = Board.miniatures[guid]["coordinate"]
    calculate_rec(coordinate[1], coordinate[2], -1, false)

    PathFinding.cache[guid] = current_pathfinding
end

return PathFinding
