--------------------------------------
--- This is the main file for the board object type
--- Contains GameObjects event and functions that needs to be called by externally

require("tts_squad_tactics.common.Character")
require("tts_squad_tactics.common.Constant")
require("tts_squad_tactics.common.Utils")
require("tts_squad_tactics.common.TextUtils")
require("tts_squad_tactics.common.Vector2")
require("tts_squad_tactics.board.Board")
require("tts_squad_tactics.board.PlayerPanel")
require("tts_squad_tactics.board.BoardPanel")
require("tts_squad_tactics.board.PathFinding")
require("tts_squad_tactics.board.LineOfSight")
require("tts_squad_tactics.board.LineDrawer")
require("tts_squad_tactics.board.Path")
require("tts_squad_tactics.board.AoE")
require("tts_squad_tactics.listener.Listener")

-- require("tts_squad_tactics.Cone")

-- size of the current board
-- will need a way to edit it easily (GM Notes? small UI ?)
local size_x = 40
local size_y = 24

-- disable save, for dev/debug purpose
local load_disabled = false

-- debug, need to be replaced by something better
local picked_up_guid
local picked_up_color
local old_coordinate = { 99, 99 }
local old_hover_coordinate = {}

--Runs when game is loaded.
function onLoad(saved_data)
    local data = {}
    if load_disabled == false and saved_data ~= "" then
        data = JSON.decode(saved_data)
    end

    -- Hack to avoid Alt to zoom, very nice
    self.alt_view_angle = Vector.new(90,0,0)

    -- Create Context
    self.addContextMenuItem("Edit Board", board_edit)
    self.addContextMenuItem("Save Board", board_save)
    self.addContextMenuItem("Reset Board", board_reset)
    self.addContextMenuItem("Reset Visibility", board_reset_visibility)

        --print(json_data)
    local start_time =  os.time()
    --json_data = JSON.decode(json_data)
    json_data = json.decode(json_data)
    local end_time =  os.time()
    local duration = end_time - start_time
    print("Duration: " .. tostring(duration))
    print(json_data["3:22"]["value"])
    print(json_data["3:22"]["character"])

    -- give some time to load the ui asset, not sure if there is a better way
    Wait.time(
            function()
                board_initialization(data)
            end
    , 1)


    local json_data = require("tts_squad_tactics.board.data")
    local json = require ("tts_squad_tactics.common.json")


end

function board_initialization(data)
    -- Initialise the Board
    Board.setup(size_x, size_y, data)

    -- create the snap points
    Board.create_snap_points()

    -- Setup the LineDrawer
    LineDrawer.setup()

    -- create the board panel etc
    BoardPanel.create("run")

    Listener.register()

    -- find all miniature can't be called the same frame the board ui is created
    Wait.frames(find_characters, 2)
end

function onPlayerChangeColor()
    BoardPanel.create("run")
    LineDrawer.setup()
end

function find_characters()
    -- find character in the board
    Board.find_characters()
    -- check the visibility of every miniature on the board
    board_reset_visibility()
end

function board_edit()
    BoardPanel.create("edit")
end

function board_reset()
    Board.reset()
end

function board_save()
    --self.script_state = JSON.encode_pretty(Board.data)
    self.script_state = JSON.encode(Board.data)
    BoardPanel.create("run")
end

function board_reset_visibility()
    for _, character in pairs(Board.characters) do
        if character.get("team") ~= PLAYERS then
            character.update({ visible = false }, self)
            -- hide all characters
            local miniature = character.getObject()
            miniature.setInvisibleTo({ "Blue", "Green", "White", "Pink", "Red", "Orange", "Yellow", "Purple" })
        else
            character.update({ visible = true }, self)
        end
    end
    Board.check_visibility()
end

function onObjectDrop(player_color, object)
    -- only continue if it's a miniature
    if object.hasTag("miniature") then
        -- get the guid, faster since it will be used  few times
        local guid = object.getGUID()
        -- get the character
        local character = Board.characters[guid]
        -- test/debug
        picked_up_guid = nil
        picked_up_color = nil
        old_coordinate = { 99, 99 }

        -- move the character on the board
        Board.move_character(character)

        -- Hide the PlayerPanel
        PlayerPanel.display(player_color, false)

        -- update the character LoS
        LoS.calculate(guid, Board.characters[object.getGUID()].get("coordinate"), player_color)
    end
end

function onObjectPickUp(player_color, object)
    -- only continue if it's a miniature
    if object.hasTag("miniature") then
        -- test/debug
        picked_up_guid = object.getGUID()
        picked_up_color = player_color

        --local miniature = Board.miniatures[picked_up_guid]

        -- calculate the pathfinding
        --PathFinding.calculate(picked_up_guid, 8)

        -- Show the pathfinding, at least for now until the buttons
        --PlayerPanel.start_move(player_color, picked_up_guid, 8)
    end
end

-- The action sent by the Global UI
function send_action(params)
    local player_color = params[1]
    local guid = params[2]
    local action = params[3]
    local value = params[4]
    --print("player_color: " .. player_color)
    --print("guid: " .. guid)
    --print("value: " .. value)
    Board.start_action(player_color, guid, action, value)

end



--function onFixedUpdate()
--    -- this is called 90 times per seconds, even if it's more than fps
--    if picked_up_guid ~= nil then
--        local object = getObjectFromGUID(picked_up_guid)
--        local coordinate = Board.get_coordinate(object.getPosition(), false)
--        if old_coordinate[1] ~= coordinate[1] or old_coordinate[2] ~= coordinate[2] then
--            if old_coordinate ~= nil then
--                BoardPanel.display(old_coordinate[1], old_coordinate[2], false)
--            end
--            BoardPanel.display(coordinate[1], coordinate[2], true)
--            old_coordinate = coordinate
--            wait_in_tile = 0
--            LineDrawer.remove_visibility("los_" .. picked_up_guid, picked_up_color)
--        else
--            if wait_in_tile < 15 then
--                -- at frame 30 draw, only this one
--                wait_in_tile = wait_in_tile + 1
--                if wait_in_tile == 15 then
--                    LoS.calculate(picked_up_guid, coordinate, picked_up_color)
--                end
--            end
--        end
--    end
--end

function onUpdate()
    -- Check if a cursor need to display cover
    for player_color, action in pairs(Board.actions) do
        if action["action"] == Constant.MOVE or action["action"] == Constant.SAFE_MOVE then
            -- only do this if the character is visible
            if Board.characters[action["guid"]].get("visible") then

                local coordinate = Board.get_coordinate(Player[player_color].getPointerPosition(), false)
                if old_hover_coordinate[player_color] == nil or old_hover_coordinate[player_color][1] ~= coordinate[1] or old_hover_coordinate[player_color][2] ~= coordinate[2] then
                    if old_hover_coordinate[player_color] ~= nil then
                        BoardPanel.display(old_hover_coordinate[player_color], false)
                    end
                    -- display the tile under the cursor
                    if Board.is_inside(coordinate) and not action.is_moving then
                        BoardPanel.display(coordinate, true)
                        Board.draw_path(player_color, coordinate)
                    end
                    old_hover_coordinate[player_color] = coordinate
                end
            end
        end
    end

    -- this is fps dependent, but enough
    Path.continue()

    -- AoE update if needed
    AoE.update()
end

function PlayerPanel_hide(params)
    player_color = params[1]
    PlayerPanel.display(player_color, false)
end
