--------------------------------------
--- Handle the players GUI Panel for the Board
--- Create and handle one panel for each player seated

-- No local, make it a global
PlayerPanel = {

}

function PlayerPanel.create(player_color)
    -- at creation no need to make complex coordinate
    local player_panel = {
        tag = "Panel",
        attributes = {
            scale = "1 1 1",
            id = "PlayerPanel_" .. player_color,
            -- +1 should be enough but we need to take some padding with font size
            height = BoardPanel.tile_size_x * (Constant.MAX_MOVE * 2 + 2),
            width = BoardPanel.tile_size_x * (Constant.MAX_MOVE * 2 + 2),
            position = "0 0 0",
            --position = "0 0 -14",
            rotation = "0 0 0",
            active = "false",
            visibility = player_color,
        },
        children = {
            {
                tag = "Text",
                attributes = {
                    id = "Text_" .. player_color,
                    -- resizeTextForBestFit = true,
                    -- resizeTextMaxSize = 240,
                    lineSpacing = 0.87,
                    text = "",
                    fontSize = BoardPanel.tile_size_x,
                }
            },
            {
                tag = "Button",
                attributes = {
                    id = "PlayerPanel_button_" .. player_color,
                    width = BoardPanel.tile_size_x * (Constant.MAX_MOVE * 2 + 2),
                    height = BoardPanel.tile_size_y * (Constant.MAX_MOVE * 2 + 2),
                    color = "#80808000",
                    onclick = "PlayerPanel_click(" .. player_color .. ")",
                    active = false,
                }
            }
        }
    }

    return player_panel
end

function PlayerPanel_click(player, player_color)
    -- The player color can be different if another player click on someone's panel by mistake
    if player.color ~= player_color then
        return
    end
    local coordinate = Board.get_coordinate(Player[player_color].getPointerPosition())

    if Board.is_inside(coordinate) then
        -- check if it's a stoppable tile
        local tile_value = Board.data[coordinate[2]][coordinate[1]]
        if Constant[tile_value].stoppable then
            -- try to find the GUID
            local action = Board.actions[player_color]
            if action == nil then
                return
            end
            local guid = action.guid
            -- check it's a valid path
            if PathFinding.cache[guid][coordinate[2]][coordinate[1]] ~= 99 then
                -- Make Board move the miniature
                Board.move_to(player_color, coordinate)
            end
        end
    end
end

function PlayerPanel.start_move(player_color, guid, nb_move)
    local coordinate = Board.miniatures[guid]["coordinate"]
    local pos_x = BoardPanel.tile_size_x * (coordinate[1] - 0.5) - BoardPanel.panel_x / 2
    local pos_y = BoardPanel.panel_y / 2 - BoardPanel.tile_size_y * (coordinate[2] - 0.5)
    local position = pos_x .. " " .. pos_y .. " -12"
    self.UI.setAttribute("PlayerPanel_" .. player_color, "position", position)
    -- update the text
    PlayerPanel.update_text(player_color, guid, nb_move, coordinate)
    --
    PlayerPanel.display(player_color, true)

    -- resize and activate the button to move
    local attributes = {
        width = BoardPanel.tile_size_x * (nb_move * 2 + 1),
        height = BoardPanel.tile_size_y * (nb_move * 2 + 1),
        active = true,
    }
    self.UI.setAttributes("PlayerPanel_button_" .. player_color, attributes)
end

function PlayerPanel.display(player_color, active)
    self.UI.setAttribute("PlayerPanel_" .. player_color, "active", active)
end

function PlayerPanel.update_text(player_color, guid, nb_move, coordinate)
    -- the future text
    local new_text = ""
    local min_y = coordinate[2] - Constant.MAX_MOVE
    local max_y = coordinate[2] + Constant.MAX_MOVE
    local min_x = coordinate[1] - Constant.MAX_MOVE
    local max_x = coordinate[1] + Constant.MAX_MOVE

    -- Could use some optimizations
    for y = min_y, max_y, 1 do
        local line = ""
        for x = min_x, max_x, 1 do
            line = line .. PlayerPanel.tile_character(x, y, guid, nb_move)
        end
        new_text = new_text .. line .. "\n"
    end
    self.UI.setAttribute("Text_" .. player_color, "text", new_text)
end

function PlayerPanel.tile_character(x, y, guid, nb_move)
    -- out of bounds, no need to draw
    if not Board.is_inside({ x, y }) then
        return block_char(Constant.HIDDEN.character, 1, Constant.HIDDEN.color)
    end

    -- we can't stop there, no need to draw
    local tile_value = Board.data[y][x]


    -- out of reach , no need to draw
    if PathFinding.cache[guid][y][x] > nb_move then
        return block_char(Constant.HIDDEN.character, 1, Constant.HIDDEN.color)
    end

    -- if the player can't stop there, display it's tile information
    if not Constant[tile_value].stoppable then
        return block_char(Constant[tile_value].character, 1, Constant[tile_value].color)
    end

    -- the player can move there, will it be hindered?
    if PathFinding.check_hinder(guid, x, y) then
        return block_char(Constant.HINDER.character, 1, Constant.HINDER.color)
    end

    return block_char(Constant[tile_value].character, 1, Constant[tile_value].color)
end

return PlayerPanel
