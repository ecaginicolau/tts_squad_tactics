--------------------------------------
--- Package that represents the Board's data itself
--- Contains few utilities functions
--- ex: convert position to coordinate and the other way around


-- No local, make it a global
Board = {
    size_x = 0,
    size_y = 0,
    data = { },
    actions = {},
    characters = {},
    teams = {},
    coordinate_team = {},
    world_size_x = 0,
    world_size_y = 0,
    bounds = {},
    bounds_normalized = {},
    board_scale = nil,
    zones = {},
}

-- this help loops through all directions
local hinder_direction = {
    { 0, 0 },
    { 0, 1 },
    { 1, 0 },
    { 0, -1 },
    { -1, 0 },
    { 1, 1 },
    { 1, -1 },
    { -1, 1 },
    { -1, -1 },
}

function Board.setup(size_x, size_y, data)
    Board.size_x = size_x
    Board.size_y = size_y
    Board.data = data
    Board.characters = {}
    -- will store ongoing action by player_color
    Board.actions = {}
    Board.coordinate_team = {}

    -- calculate and store the bounds
    Board.bounds = self.getBounds() -- extract it at setup because it cal change with the UI!
    Board.bounds_normalized = self.getBoundsNormalized() -- extract it at setup because it cal change with the UI!

    Board.calculate_team()
    Board.calculate_dimension()

    Board.group_zone()

    return Board
end

function Board.group_zone()
    Board.zones = {}
    for y = 1, Board.size_y, 1 do
        for x = 1, Board.size_x, 1 do
            local tile_value = Board.get_tile(x, y)
            -- clean the map coordinate where we are at it
            tile_value["x"] = x
            tile_value["y"] = y
            if tonumber(tile_value.group_id) > 0 then
                local group_id = tostring(tile_value.group_id)
                if Board.zones[group_id] == nil then
                    Board.zones[group_id] = {
                        open = false,
                        tiles = {}
                    }
                end
                table.insert(Board.zones[group_id]["tiles"], tile_value)
            end
        end
    end

end

function Board.get_tile(x_or_coordinate, y)
    local x
    if y == nil then
        y = x_or_coordinate[2]
        x = x_or_coordinate[1]
    else
        x = x_or_coordinate
    end
    -- this hack is to align js map and lua map
    x = Board.size_x - x
    y = Board.size_y - y
    return Board.data[x .. ":" .. y]
end

function Board.set_tile(x, y, value)
    -- this hack is to align js map and lua map
    x = Board.size_x - x
    y = Board.size_y - y
    value["x"] = x
    value["y"] = y
    Board.data[x .. ":" .. y] = value
end

function Board.calculate_dimension()
    local world_size = Board.bounds["size"]
    Board.world_size_x = world_size[1] / Board.size_x
    Board.world_size_y = world_size[3] / Board.size_y
    Board.board_scale = Board.get_scale()
end

function Board.get_scale()
    -- get the position of 2 tiles
    local position1 = Board.get_position(0, 0)
    local position2 = Board.get_position(10, 0)
    -- calculate the distance
    local distance = Vector.distance(position1, position2)
    return distance / 10
end

function Board.calculate_team()
    Board.coordinate_team = {}

    for y = 1, Board.size_y, 1 do
        Board.coordinate_team[y] = {}
        for x = 1, Board.size_x, 1 do
            -- store a list of team
            Board.coordinate_team[y][x] = {  }
        end
    end
    for _, character in pairs(Board.characters) do
        local coordinate = character.get("coordinate")
        for _, direction in ipairs(hinder_direction) do
            local dx = coordinate[1] + direction[1]
            local dy = coordinate[2] + direction[2]
            if Board.is_inside({ dx, dy }) then
                -- insert in the list of team
                table.insert(Board.coordinate_team[dy][dx], character.get("team"))
            end
        end
    end
end

function Board.get_position(x_or_coordinate, y)
    local x = x_or_coordinate
    -- the function accept a coordinate or a couple of x/y
    if y == nil then
        x = x_or_coordinate[1]
        y = x_or_coordinate[2]
    end
    local bounds = Board.bounds
    local size = bounds['size']
    local center = bounds['center']
    -- the initial position will be the top left corner
    local pos_x = center[1] - size[1] / 2
    local pos_y = center[2] + size[2] / 2
    local pos_z = center[3] + size[3] / 2
    -- now add the x and y
    pos_x = pos_x + (x - 0.5) * (size[1] / Board.size_x)
    pos_z = pos_z - (y - 0.5) * (size[3] / Board.size_y)

    return Vector.new(pos_x, pos_y, pos_z)
end

function Board.get_position_relative(x_or_coordinate, y)
    local x = x_or_coordinate
    -- the function accept a coordinate or a couple of x/y
    if y == nil then
        x = x_or_coordinate[1]
        y = x_or_coordinate[2]
    end
    local position = Board.get_position(x, y)
    -- apply scale
    local scale = self.getScale()
    local pos_x = position[1]
    local pos_y = position[2]
    local pos_z = position[3]
    -- add the center
    local center = Board.bounds['center']
    pos_x = pos_x - center[1]
    pos_y = pos_y - center[2]
    pos_z = pos_z - center[3]

    pos_x = -pos_x / scale[1] -- not sure why this coordinate has x axis inverted
    pos_y = pos_y / scale[2]
    pos_z = pos_z / scale[3]

    return Vector.new(pos_x, pos_y, pos_z)
end

function Board.get_cover_status_face(x, y, face)
    local direction = Constant.DIRECTIONS[face]
    local dx = direction[1] + x
    local dy = direction[2] + y
    return Board.get_cover_status(x, y, dx, dy)
end

-- this function return an integer, 0 : no cover, 1 semi cover, 2 full cover
function Board.get_cover_status(x1, y1, x2, y2)
    -- make sure both coordinate are inside the board
    if not Board.is_inside({ x1, y1 }) then
        return 0
    end
    if not Board.is_inside({ x2, y2 }) then
        return 0
    end
    -- they are in the board, handle value
    local tile_value1 = Board.get_tile(x1, y1)
    local tile_value2 = Board.get_tile(x2, y2)

    -- This helps with the switchable
    if tile_value1.value == tile_value2.value then
        return 0
    end

    return tile_value2.cover
end

function Board.reset()
    Board.data = {}
    for y = 1, Board.size_y, 1 do
        for x = 1, Board.size_x, 1 do
            Board.data[x .. ":" .. y] = table.shallow_copy(Constant.WALKABLE)
        end
    end
end

function Board.get_coordinate(position, rounded)
    -- by default it's rounded
    if rounded == nil then
        rounded = false
    end
    local bounds = Board.bounds
    local center = bounds['center']
    local size = bounds['size']
    local pos_x = -center[1] + position[1] + size[1] / 2.0
    local pos_y = center[3] - position[3] + size[3] / 2.0

    local cell_size_x = size[1] / Board.size_x
    local cell_size_y = size[3] / Board.size_y

    pos_x = pos_x - cell_size_x / 2
    pos_y = pos_y - cell_size_y / 2

    pos_x = pos_x / cell_size_x + 1 -- don't forget to add 1 to be LUA compliant
    pos_y = pos_y / cell_size_y + 1 -- don't forget to add 1 to be LUA compliant

    if not rounded then
        pos_x = math.tointeger(pos_x)
        pos_y = math.tointeger(pos_y)
    else
        pos_x = math.round(pos_x, 2)
        pos_y = math.round(pos_y, 2)
    end

    return { pos_x, pos_y }
end

function Board.is_inside(coordinate)
    if coordinate[1] < 1 or coordinate[1] > Board.size_x or coordinate[2] < 1 or coordinate[2] > Board.size_y then
        return false
    end
    return true
end

function Board.create_snap_points()
    local bounds = Board.bounds_normalized
    local size = bounds['size']
    -- The list of all snap points of this objects, this will overwrite any old snap points
    local list_snap_points = {}
    local scale = self.getScale()
    -- Apply scale to size because the snap point are pure relative
    size[1] = size[1] / scale[1]
    size[2] = size[2] / scale[2]
    size[3] = size[3] / scale[3]

    -- Always put on top of the board
    local pos_y = size[2] / 2

    for y = 1, Board.size_y, 1 do
        for x = 1, Board.size_x, 1 do
            local pos_x = -size[1] / 2 + ((x - 0.5) / Board.size_x) * size[1]
            local pos_z = -size[3] / 2 + ((y - 0.5) / Board.size_y) * size[3]
            local snap_position = { pos_x, pos_y, pos_z }
            list_snap_points[#list_snap_points + 1] = { position = snap_position }
        end
    end
    self.setSnapPoints(list_snap_points)
end

function Board.next_value(value)
    -- Weird LUA modulo code , since any table starts at 1 ...
    local new_index = Constant[value].index % Constant.NB_TERRAINS + 1
    return Constant[Constant.TERRAINS[new_index]].value
end

-- Find all miniatures in the current board
function Board.find_characters()
    Board.characters = {}
    for _, character in pairs(Listener.characters) do
        Board.add_new_character(character)
    end
    -- at the end calculate team influence
    Board.calculate_team()
end

function Board.add_new_character(character)
    local guid = character.getGUID()

    -- get the miniature itself
    local miniature = character.getObject()
    if Board.teams[character.get("team")] == nil then
        Board.teams[character.get("team")] = {}
    end
    table.insert(Board.teams[character.get("team")], character)

    -- get the miniature coordinate
    local coordinate = Board.get_coordinate(miniature.getPosition())
    character.update({ on_board = Board.is_inside(coordinate) }, self.getGUID())

    -- store the miniature inside the table
    Board.characters[guid] = character

    -- update the character coordinate
    character.update({ coordinate = coordinate }, self.getGUID())
end

function Board.start_action(player_color, guid, action, value)
    -- Store the current action for the player
    Board.actions[player_color] = {
        action = action,
        guid = guid,
        value = value,
    }

    local coordinate = Board.characters[guid].get("coordinate")
    -- take the position from the coordinate to avoid the small involuntary movement
    local position = Board.get_position(coordinate)

    -- Check action type, both MOVE and SAFE_MOVE are similar
    if action == Constant.MOVE or action == Constant.SAFE_MOVE then
        local nb_move = tonumber(value)
        local safe = action == Constant.SAFE_MOVE
        Board.move_start(player_color, guid, nb_move, safe)
    end
    if action == Constant.LINE then
        position[2] = position[2] + 0.05 -- raise the cone a bit higher than the board
        local width = 0.4
        local range = tonumber(value)
        AoE.create_line(player_color, guid, width, range, position, coordinate)
    end
    if action == Constant.CONE then
        local angle = 60
        local range = tonumber(value)
        AoE.create_cone(player_color, guid, angle, range, position, coordinate)
    end
    if action == Constant.SPLASH then
        position[2] = position[2] + 0.1-- raise the cone a bit higher than the board

        local radius = 2
        local range = tonumber(value)
        AoE.create_splash(player_color, guid, radius, range, position, coordinate)
    end
    if action == Constant.ATTACK then
        position[2] = position[2] + 0.05-- raise the cone a bit higher than the board

        local range = tonumber(value)
        AoE.create_attack(player_color, guid, range, position, coordinate)
    end
    if action == Constant.BOUNCE then
        position[2] = position[2] + 0.05-- raise the cone a bit higher than the board

        local range = tonumber(value)
        AoE.create_bounce(player_color, guid, range, position, coordinate)
    end

end

-- Start of the move action
function Board.move_start(player_color, guid, nb_move, safe)
    -- calculate the pathfinding
    PathFinding.calculate(guid, nb_move, safe)

    -- Display the Player panel under the miniature
    PlayerPanel.start_move(player_color, guid, nb_move)
end

function Board.draw_path(player_color, coordinate)
    local action = Board.actions[player_color]
    if action == nil then
        print("ERROR: no action started")
        return
    end
    local guid = action.guid
    local miniature = getObjectFromGUID(guid)
    local current_position = miniature.getPosition()
    local path_coordinates = Board.find_path(guid, coordinate)

    if path_coordinates ~= nil then
        -- move the miniature along the path
        -- convert to position path
        local path = {}
        for _, path_coordinate in ipairs(path_coordinates) do
            local path_position = Board.get_position(path_coordinate)
            -- make sure to always set the y position to the miniature  position
            path_position[2] = current_position[2] + 0.05
            -- insert into the position path
            table.insert(path, path_position)
        end
        local lines = {
            {
                points = path,
                color = { 0.2, 0.8, 0.2 },
                thickness = 0.1,
                rotation = { 0, 0, 0 },
            }
        }

        LineDrawer.add_lines("miniature_path_" .. player_color, lines, player_color)

    end
end

function Board.move_to(player_color, coordinate)
    -- Hide the PlayerPanel
    PlayerPanel.display(player_color, false)
    -- We received an move to command, need to find which miniature was moving
    local action = Board.actions[player_color]
    if action == nil then
        print("ERROR: no action started")
        return
    end

    LineDrawer.remove_visibility("miniature_path_" .. player_color, player_color)

    local guid = action.guid
    local miniature = getObjectFromGUID(guid)
    local current_position = miniature.getPosition()
    local next_position = Board.get_position(coordinate)

    -- get the old coordinate of this miniature
    local character = Board.characters[guid]
    local current_coordinate = character.get("coordinate")
    -- Hide both current and next destination coordinate during the move animation
    BoardPanel.display(current_coordinate, false)
    BoardPanel.display(coordinate, false)

    -- we need to replace the Y component
    next_position[2] = current_position[2]

    -- Get the path
    local path_coordinates = Board.find_path(guid, coordinate)
    if path_coordinates ~= nil then
        -- move the miniature along the path
        -- convert to position path
        local path = {}
        for _, path_coordinate in ipairs(path_coordinates) do
            local path_position = Board.get_position(path_coordinate)
            -- make sure to always set the y position to the miniature  position
            path_position[2] = current_position[2]
            -- insert into the position path
            table.insert(path, path_position)
        end

        -- rotate the miniature to the first coordinate
        local angle = angle_coordinate(path_coordinates[1], coordinate)
        miniature.setRotationSmooth({ 0, angle, 0 })

        -- store the fact that the miniature is moving inside the action
        action.is_moving = true
        action.destination = coordinate

        local end_move_func = function()
            Board.move_end(player_color, guid)
        end

        Path.start_path(guid, path, end_move_func)
    else
        print("no valid path, teleport")
        miniature.setPosition(next_position)
        -- End the move
        Board.move_end(player_color, guid)
    end

end

function Board.find_path(guid, coordinate)
    local x = coordinate[1]
    local y = coordinate[2]
    local cost = PathFinding.cache[guid][y][x]
    -- if it's an impossible coordinate no need to look for a path
    if cost == 99 then
        return nil
    end
    local path = { coordinate }
    while cost > 0 do
        local min_cost = cost
        local next_coordinate = { x, y }
        -- look in every direction which tile is the cheapest to move to, for the shortest path
        for _, direction in ipairs(Constant.DIRECTIONS) do
            local dx = x + direction[1]
            local dy = y + direction[2]
            if Board.is_inside({ dx, dy }) then
                if PathFinding.cache[guid][dy][dx] < min_cost then
                    min_cost = PathFinding.cache[guid][dy][dx]
                    next_coordinate = { dx, dy }
                end
            end
        end
        -- check if we moved
        if cost == min_cost then
            -- We didn't move! error
            return nil
        end
        -- here we found the cheapest path, at it to the list
        table.insert(path, next_coordinate)
        -- prepare for next iteration
        cost = min_cost
        x = next_coordinate[1]
        y = next_coordinate[2]
    end
    -- reverse the path
    table.reverse(path)
    -- return the path
    return path
end

function Board.move_end(player_color, guid)
    local character = Board.characters[guid]
    -- move the miniature on the board
    Board.move_character(character)
    -- Hide the PlayerPanel
    PlayerPanel.display(player_color, false)
    -- end the action
    Board.actions[player_color] = nil
    -- check new visibility
    Board.check_visibility_single(guid)
end

function Board.move_character(character)
    -- move the miniature in its final position
    Board.set_character_position(character)
end

-- What should happen when the coordinate of a miniature change in the board
function Board.set_character_position(character)
    -- get the miniature
    local miniature = getObjectFromGUID(character.getGUID())

    -- get the coordinate on the board for this miniature
    local coordinate = Board.get_coordinate(miniature.getPosition())

    -- store the position of this miniature
    if Board.characters[character.getGUID()] == nil then
        -- if it's the first time the miniature enter the board, add it to the board
        Board.add_new_character(character)
    else
        -- update its coordinate
        character.update({ coordinate = coordinate }, self.getGUID())
    end

    -- Calculate new team hindering
    Board.calculate_team()

    -- show the new tile
    if character.get("visible") then
        BoardPanel.display(coordinate, true)
    end
end

function Board_check_visibility_single_coroutine(character)
    local new_visible = {}
    local character_team = character.get("team")
    for _, target in pairs(Board.characters) do
        -- get the target team it's fast
        local target_team = target.get("team")
        -- at least one of them need to be a player to be of any sense
        if target_team == PLAYERS or character_team == PLAYERS then
            -- the target must be visible on board and of another team than the character
            if target_team ~= character_team and target.get("on_board") then
                if not target.get("visible") or not character.get("visible") then
                    if LoS.coordinate(character.get("coordinate"), target.get("coordinate"), false) then
                        -- only one of the 2 needs to be added to the list of newly visible
                        if target_team == PLAYERS then
                            character.update({ visible = true }, self)
                            table.insert(new_visible, character)
                        else
                            target.update({ visible = true }, self)
                            table.insert(new_visible, target)
                        end
                    end
                    coroutine.yield(0)
                end
            end
        end
    end
    -- handle visibility
    for _, target in pairs(new_visible) do
        local miniature = target.getObject()
        miniature.setInvisibleTo()
        BoardPanel.display(target.get("coordinate"), true)
    end

    return 1
end

function Board.open_zone(group_id)
    print("Opening zone: " .. group_id)
    group_id = tostring(group_id)
    for _, tile_value in pairs(Board.zones[group_id]["tiles"]) do
        print("Opening tile: " .. tile_value["x"] .. ":" .. tile_value["y"])

        if Board.zones[group_id]["open"] then
            BoardPanel.close_tile(tile_value["x"], tile_value["y"])
        else
            BoardPanel.open_tile(tile_value["x"], tile_value["y"])
        end
    end
    Board.zones[group_id]["open"] = not Board.zones[group_id]["open"]

end

function Board.check_visibility_single(guid)
    local character = Board.characters[guid]
    local fun_name = "Board_check_visibility_single_coroutine_" .. guid
    local func = function()
        return Board_check_visibility_single_coroutine(character)
    end
    self.setVar(fun_name, func)
    startLuaCoroutine(self, fun_name)
end

function Board_check_visibility_coroutine()
    for _, character in pairs(Board.teams[PLAYERS]) do
        if character.get("on_board") then
            Board_check_visibility_single_coroutine(character)
            BoardPanel.display(character.get("coordinate"), true)
        end
    end
    return 1
end

function Board.check_visibility()
    startLuaCoroutine(self, "Board_check_visibility_coroutine")
end

-- start and end turn events
function Board_start_turn()
    for _, character in pairs(Board.characters) do
        local miniature = getObjectFromGUID(character.getGUID())
        if miniature ~= nil then
            local position = Board.get_position(character.get("coordinate"))
            local current_position = miniature.getPosition()
            -- transfer the Y component
            position[2] = current_position[2]
            miniature.setPosition(position)
            miniature.setLock(true)
        end
    end
end

function Board_end_turn()
    for _, character in pairs(Board.characters) do
        local miniature = getObjectFromGUID(character.getGUID())
        if miniature ~= nil then
            miniature.setLock(false)
        end
    end
end

return Board
