
-- Store which player has an open panel
detail_player = {}


function UI_detail_panel(player_color)

  -- empty data, just to be able to create the panel
  local data = {
    nom = "???",
    level = "?",
    tag1 = "",
    tag2 = "",
    tag3 = "",
    tag4 = "",
    evasion = "?",
    impact = 0,
    feu = 0,
    electrique = 0,
    fleau = 0,
    froid = 0,
    identification = 0,
    haine_multiplicateur = 0,
    haine = 0,
    max_hp = 100,
    current_hp = 100,
    identified = false,
    initiative = 0,
    guid = "AAAAAA",
  }
  -- calculate life percentage
  local percentage = math.tointeger((data["current_hp"] * 100.0) / data["max_hp"])
  -- hp display
  local hp_display = tostring(percentage) .. "%"
  -- local identifaction_color = "#121280"
  if data["identified"] then
    hp_display = data["current_hp"] .. " / " .. data["max_hp"]
    -- identifaction_color = "#801212"
  end

  local negative_color = "#128012"
  local neutral_color = "#121212"
  local positive_color = "#801212"

  local def_color = {}

  local def_value = {}

  if not data["identified"] then
    for _, defense in ipairs(list_defense) do
      def_color[defense] = neutral_color
      def_value[defense] = '?'
    end
  else
    for _, defense in ipairs(list_defense) do
      if data[defense] < 0 then
        def_color[defense] = negative_color
      elseif data[defense] > 0 then
        def_color[defense] = positive_color
      else -- == 0
        def_color[defense] = neutral_color
      end
      def_value[defense] = data[defense]
    end
  end


  local panel = {
    tag = "Panel",
    attributes =
    {
      id = "panel_detail_" .. player_color,
      active = false,
      width = 793,
      height = 473,
      -- position = "0 0 0",
      offsetXY = "400 -100",
      rectAlignment = "UpperLeft",
      scale = "0.5 0.5 0.5",
      rotation = "0 0 0",
      showAnimation = "FadeIn",
      hideAnimation = "FadeOut",
      color = "#AAAAAA",
      allowDragging = true,
      returnToOriginalPositionWhenReleased = false,
      restrictDraggingToParentBounds = false,
      visibility = player_color,
    },
    children = {
      {
        tag = "Image",
        attributes =
        {
          active = true,
          image = "monster_detail",
          position = "0 0 0",
          rotation = "0 0 0",
          raycastTarget = true,
        },
        children = {}
      }
    }
  }

  -- make a shortcut, faster
  local background = panel["children"][1]["children"]
  -- nom
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "nom_" .. player_color,
      text = data["nom"],
      fontSize = 70,
      color = "#FFFFFF",
      position = "-66 170 0",
    }
  }
  -- level
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "level_" .. player_color,
      text = data["level"],
      fontSize = 70,
      color = "#000000",
      position = "300 170 0",
    },
  }
  -- tag 1
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "tag1_" .. player_color,
      text = data["tag1"],
      fontSize = 36,
      color = "#000000",
      position = "-300 85 0",
    },
  }
  -- tag 2
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "tag2_" .. player_color,
      text = data["tag2"],
      fontSize = 36,
      color = "#000000",
      position = "-100 85 0",
    },
  }
  -- tag 3
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "tag3_" .. player_color,
      text = data["tag3"],
      fontSize = 36,
      color = "#000000",
      position = "100 85 0",
    },
  }
  -- tag 4
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "tag4_" .. player_color,
      text = data["tag4"],
      fontSize = 36,
      color = "#000000",
      position = "300 85 0",
    },
  }
  -- hp progressbar
  background[#background + 1] = {
    tag = "ProgressBar",
    attributes =
    {
      id = "percentage_" .. player_color,
      color = "#121212",
      width = "700",
      height = "70",
      position = "0 0 0",
      percentage = percentage,
      percentageTextFormat = "0",
      textColor = "#BBBBBB",
      fontSize = 50,
      fillImageColor = "#AA1212",
      showPercentageText = false,
    },
  }
  -- hp text
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "hp_display_".. player_color,
      text = percentage,
      fontSize = 50,
      color = "#BBBBBB",
      position = "0 0 0",
    },
  }
  -- evasion text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "evasion_"..player_color,
      text = data["evasion"],
      fontSize = 40,
      color = "#000000",
      position = "-140 -200 0",
    },
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Evasion",
      image = "evasion",
      color = "#000000",
      position = "-190 -200 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- haine text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "haine_" .. player_color,
      text = data["haine"],
      fontSize = 40,
      color = def_color["impact"],
      position = "-20 -200 0",
    },
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Haine multiplicateur",
      image = "haine2",
      color = "#000000",
      position = "-70 -200 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- initiative text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "initiative_" .. player_color,
      text = data["initiative"],
      fontSize = 40,
      color = "#000000",
      position = "100 -200 0",
    },
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Initiative",
      image = "initiative",
      color = "#000000",
      position = "50 -200 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- identification text + image + button
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "identification_" .. player_color,
      text = data["identification"],
      fontSize = 40,
      color = "#000000",
      position = "220 -200 0",
    },
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Difficulte d'identification",
      image = "identification",
      color = "#000000",
      position = "170 -200 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  background[#background + 1] = {
    tag = "Button",
    attributes =
    {
      text = "Identifier",
      fontSize = 25,
      textColor = "#000000",
      color = "#AAAAAA",
      width = 120,
      height = 60,
      position = "320 -200 0",
      onclick = "UI_detail_identify("..data["guid"]..")"
    }
  }
  -- impact text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "impact_" .. player_color,
      text = def_value["impact"],
      fontSize = 40,
      color = def_color["impact"],
      position = "-140 -115 0",
    }
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Impact",
      image = "impact2",
      color = "#121212",
      position = "-195 -115 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- feu text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "feu_" .. player_color,
      text = def_value["feu"],
      fontSize = 40,
      color = def_color["feu"],
      position = "-20 -115 0",
    }
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Feu",
      image = "feu",
      color = "#801212",
      position = "-70 -115 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- froid text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "froid_" .. player_color,
      text = def_value["froid"],
      fontSize = 40,
      color = def_color["froid"],
      position = "100 -115 0",
    }
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Froid",
      image = "froid",
      color = "#121280",
      position = "45 -115 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- electrique text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "electrique_" .. player_color,
      text = def_value["electrique"],
      fontSize = 40,
      color = def_color["electrique"],
      position = "220 -115 0",
    }
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Electrique",
      image = "electrique",
      color = "#AAAA12",
      position = "170 -115 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  -- fleau text + image
  background[#background + 1] = {
    tag = "Text",
    attributes =
    {
      id = "fleau_" .. player_color,
      text = def_value["fleau"],
      fontSize = 40,
      color = def_color["fleau"],
      position = "340 -115 0",
    }
  }
  background[#background + 1] = {
    tag = "Image",
    attributes =
    {
      tooltip = "Fleau",
      image = "fleau",
      color = "#128012",
      position = "290 -115 0",
      width = 50,
      height = 50,
      preserveAspect = true,
    }
  }
  background[#background + 1] = {
    tag = "Button",
    attributes =
    {
      -- text = "Identifier",
      fontSize = 40,
      color = "#AAAAAA",
      width = 60,
      height = 60,
      position = "400 236 0",
      onclick = "UI_detail_hide()",
      text = "X",
    }
  }
  return panel
end


function UI_detail_update(player_color, guid)
  local data = list_character[guid]

  local percentage = math.tointeger((data["current_hp"] * 100.0) / data["max_hp"])
  -- hp display
  local hp_display = tostring(percentage) .. "%"
  -- local identifaction_color = "#121280"
  if data["identified"] then
    hp_display = data["current_hp"] .. " / " .. data["max_hp"]
    -- identifaction_color = "#801212"
  end

  local negative_color = "#128012"
  local neutral_color = "#121212"
  local positive_color = "#801212"

  local def_color = {}

  local def_value = {}

  if not data["identified"] then
    for _, defense in ipairs(list_defense) do
      def_color[defense] = neutral_color
      def_value[defense] = '?'
    end
  else
    for _, defense in ipairs(list_defense) do
      if data[defense] < 0 then
        def_color[defense] = negative_color
      elseif data[defense] > 0 then
        def_color[defense] = positive_color
      else -- == 0
        def_color[defense] = neutral_color
      end
      def_value[defense] = data[defense]
    end
  end
  for _, defense in ipairs(list_defense) do
    local attributes = {
      text = def_value[defense],
      color = def_color[defense]
    }
    self.UI.setAttributes(defense.."_" .. player_color, attributes)
  end

  local list_text_change = {"nom", "level", "tag1", "tag2", "tag3", "tag4", "evasion", "haine", "initiative", "identification"}

  for _, text_change in ipairs(list_text_change) do
    self.UI.setAttribute(text_change.."_"..player_color, "text", data[text_change])
  end

  self.UI.setAttribute("percentage_"..player_color, "percentage", percentage)
  self.UI.setAttribute("hp_display_"..player_color, "text", hp_display)
end

function UI_detail_switch(player, guid)
  if detail_player[player.color] == nil then
    detail_player[player.color] = guid
    UI_detail_update(player.color, guid)
    self.UI.setAttribute("panel_detail_" .. player.color, "active", true)
  elseif detail_player[player.color] == guid then
    detail_player[player.color] = nil
    self.UI.setAttribute("panel_detail_" .. player.color, "active", false)
  else
    detail_player[player.color] = guid
    UI_detail_update(player.color, guid)
  end
end


function UI_detail_hide(player)
  detail_player[player.color] = nil
  self.UI.setAttribute("panel_detail_" .. player.color, "active", false)
end

function UI_detail_identify(player)
  local guid = detail_player[player.color]
  list_character[guid]["identified"] = not list_character[guid]["identified"]
  UI_detail_update(player.color, guid)
end


function detail_reset()
  detail_player = {}
end
