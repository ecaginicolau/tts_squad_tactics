local dic_line = {}
local dic_line_drawer = {}
local list_all_color = {"Black", "Blue", "Green", "White", "Pink", "Red", "Orange", "Yellow", "Purple"}
-- {0, 0, 0} seems to be under the table, it's an interesting hack
-- because relative coordinate == absolute coordinate as long as the scale is {1,1,1}
-- local helper_position = {0, 1, -14}
local helper_position = {0, 0, 0}


function line_helper_setup()
  list_object = getObjectsWithTag("LineDrawer")
  dic_line_drawer = {}
  -- local n = -10
  for _, line_drawer in ipairs(list_object) do
    local color = line_drawer.getGMNotes()
    -- still get the color from the gm note
    dic_line_drawer[color] = line_drawer
    line_drawer.setInvisibleTo(line_drawer_find_other_color(color))
    line_drawer.setLock(true)
    line_drawer.interactable = false
    -- debug
    -- n = n + 2
    -- helper_position[1] = n
    line_drawer.setPosition(helper_position)
    line_drawer.setVectorLines({})
  end
end

function line_drawer_find_other_color(player_color)
  -- Visible by all
  if player_color == "All" then
    return {}
  end
  local list_other_color = {}
  for _, color in ipairs(list_all_color) do
    -- Always add black?
    if color ~= player_color and color ~= "Black" then
      list_other_color[#list_other_color + 1] = color
    end
  end
  return list_other_color
end


function line_drawer_add_lines(key, lines, visibility)
  if visibility == nil or visibility == "" or visibility == "None" then
    visibility = {}
  end
  if type(visibility) == "string" then
    visibility = {visibility}
  end
  dic_line[key] = {
    lines = lines,
    visibility = visibility
  }
  if visibility ~= nil and #visibility > 0 then
    line_drawer_refresh()
  end
end

function line_drawer_add_visibility(key, visibility)
  -- If we try to show to everyone, then no need to append to a list
  if visibility == "All" then
    dic_line[key]["visibility"] = list_all_color
    line_drawer_refresh()
    return true
  end

  -- check if it was not already Visible
  local found = false
  for _, color in ipairs(dic_line[key]["visibility"]) do
    if color == visibility then
      found = true
    end
  end
  if not found then
    dic_line[key]["visibility"][#dic_line[key]["visibility"] + 1] = visibility
    line_drawer_refresh()
  end
end

function line_drawer_remove_visibility(key, visibility)
  -- If we try to show to everyone, then no need to append to a list
  if visibility == "All" then
    local data = dic_line[key]
    if data ~= nil then
      data["visibility"] = {}
      line_drawer_refresh()
    end
    return true
  end

  -- check if it was not already Visible
  local index = nil
  local data = dic_line[key]
  if data ~= nil then

    for i, color in ipairs(data["visibility"]) do
      if color == visibility then
        -- store the index it has been found
        index = i
      end
    end
    if index ~= nil then
      -- remove from the table at the found index
      table.remove(dic_line[key]["visibility"], index)
      line_drawer_refresh()
    end
  end
end

function line_drawer_refresh()
  local dic_line_color = {}
  for _, color in ipairs(list_all_color) do
    dic_line_color[color] = {}
  end
  for key, data in pairs(dic_line) do
    if data["visibility"] == "All" then
      for _, color in ipairs(list_all_color) do
        table.extend(dic_line_color[color], data["lines"])
      end
    else
      for _, color in ipairs(data["visibility"]) do
        table.extend(dic_line_color[color], data["lines"])
      end
    end
  end

  for color, lines in pairs(dic_line_color) do
    -- print("Drawing ".. #lines.." lines for color: ".. color)
    dic_line_drawer[color].setVectorLines(lines)
  end
end
