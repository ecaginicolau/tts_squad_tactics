-- avoid calculating this every single time
degree_to_radian = math.pi / 180.0

function split (input_str, sep)
    if sep == nil then
        sep = "%s"
    end
    local t = {}
    for str in string.gmatch(input_str, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end

function math.tointeger(float)
    return math.floor(float + .5)
end

function math.round(float, precision)
    local multi = 1
    for _ = 1, precision, 1 do
        multi = multi * 10
    end
    float = float * multi
    float = math.floor(float + .5)
    float = float / multi
    return float
end

function table.clone(org)
    return { table.unpack(org) }
end

function table.shallow_copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

function table.extend(table1, table2)
    for _, obj in ipairs(table2) do
        table.insert(table1, obj)
    end
    return table1
end

function table.count(tab)
    local count = 0
    for _, _ in pairs(tab) do
        count = count + 1
    end
    return count
end

function table.reverse(t)
    local n = #t
    local i = 1
    while i < n do
        t[i], t[n] = t[n], t[i]
        i = i + 1
        n = n - 1
    end
end

function distance_coordinate(coordinate1, coordinate2)
    local dx = coordinate1[1] - coordinate2[1]
    local dy = coordinate1[2] - coordinate2[2]
    return math.sqrt(dx * dx + dy * dy)
end

function angle_coordinate(coordinate1, coordinate2)
    -- for now 0 is looking down
    local angle = math.atan((coordinate1[1] - coordinate2[1]) / (coordinate1[2] - coordinate2[2])) / degree_to_radian
    angle = -angle
    if coordinate1[2] - coordinate2[2] < 0 then
        angle = angle + 180
    end
    return angle
end

function angle_between_2_angles(angle, min_angle, max_angle)
    -- make sure all angle are module 360
    angle = angle % 360
    min_angle = min_angle % 360
    max_angle = max_angle % 360
    if min_angle < max_angle then
        return min_angle <= angle and angle <= max_angle
    else
        return min_angle <= angle or angle <= max_angle
    end
end


-- Calculate how many lines a string take, 2nd params describe after how many character the line wraps
function number_line(str, wrap)
    if wrap == nil then
        wrap = 33
    end
    lines = {}
    local nb = 0
    for s in str:gmatch("[^\r\n]+") do
        table.insert(lines, s)
        nb = nb + math.floor(string.len(s) / wrap)
    end
    nb = nb + #lines + #lines - 1
    return nb
end

function getObjectsByName(name)
    local list_output = {}
    -- Find the old scripting zone if it exists
    local list_objects = getObjects()

    for _, obj in ipairs(list_objects) do
        -- look for the child scripting zone
        if obj.getName() == name then
            -- add to the list of objects
            table.insert(list_output, obj)
        end
    end
    return list_output
end

function is_between(value, start_value, end_value)
    if start_value > end_value then
        start_value, end_value = end_value, start_value
    end
    if value >= start_value and value <= end_value then
        return true
    end
    return false
end

function toboolean(value)
    if type(value) == "number" then
        return value > 0
    end
    if type(value) == "string" then
        return value ~= ""
    end
    if value then
        return true
    end
    return false
end