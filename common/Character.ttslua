require("tts_squad_tactics.common.Constant")

Character = {}

setmetatable(Character, {
    __call = function(_, data)
        local self = --[[---@type self]] {
            -- put the data apart , it will be easier to serialise it
            _data = {
                NAME = "Nom",
                LEVEL = 10,
                CLASS = "Civil",
                MAIN = true, -- store if it's the main character for the player
                CHANCE = { -- it should not change , but still allow it for the fun...
                    BASE = 10,
                    BONUS = 0,
                },

                -- Characteristics
                STRENGTH = {
                    BASE = 10,
                    BONUS = 0,
                },
                DEXTERITY = {
                    BASE = 10,
                    BONUS = 0,
                },
                INTELLIGENCE = {
                    BASE = 10,
                    BONUS = 0,
                },
                WISDOM = {
                    BASE = 10,
                    BONUS = 0,
                },
                CHARISMA = {
                    BASE = 10,
                    BONUS = 0,
                },

                -- Tags
                TAGS = { "", "", "", "" },

                -- HP Related
                MAX_HP = {
                    BASE = 100,
                    BONUS = 0,
                },
                CURRENT_HP = 100,
                FATIGUE = 0, -- should stay at 0 for most
                CURRENT_FATE = 5,
                MAX_FATE = {
                    BASE = 5,
                    BONUS = 0,
                },

                -- weapon slot
                WEAPON_SLOT = 1,

                -- WEAPON
                DAMAGE = {
                    BASE = 0,
                    BONUS = 0,
                },
                DAMAGE_TYPE1 = FIRE,
                DAMAGE_TYPE2 = COLD,
                MAX_AMMO = {
                    BASE = 4,
                    BONUS = 0,
                },
                CURRENT_AMMO = 4,
                RANGE = {
                    BASE = 0,
                    BONUS = 0,
                },
                ACCURACY = {
                    BASE = 0,
                    BONUS = 0,
                }, -- should be 75%+ hit chance with 3D + accuracy vs evasion

                -- Stats
                SPEED = {
                    BASE = 4,
                    BONUS = 0,
                },
                EVASION = {
                    BASE = 8,
                    BONUS = 0,
                }, -- no dice, should be around 2D + accuracy

                INITIATIVE = {  -- With 10 it should go from 0 to 20 with equipments
                    BASE = 0,
                    bONUS = 0,
                },

                -- these 2 doesn't need bonus
                IDENTIFICATION = {
                    BASE = 0,
                    BONUS = 0,
                },
                HATE = {
                    BASE = 2,
                    BONUS = 0,
                }, -- can be both the HATE score or HATE multiplier

                -- Armors
                IMPACT = {
                    BASE = 0,
                    BONUS = 0,
                },
                FIRE = {
                    BASE = 0,
                    BONUS = 0,
                },
                COLD = {
                    BASE = 0,
                    BONUS = 0,
                },
                ELECTRIC = {
                    BASE = 0,
                    BONUS = 0,
                },
                BLIGHT = {
                    BASE = 0,
                    BONUS = 0,
                },
                DIRECT = {
                    BASE = 0,
                    BONUS = 0,
                },

                -- List available move, for the UI
                AVAILABLE_MOVE = { 4, 8 },
                AVAILABLE_SAFE_MOVE = { 2, 4 },

                -- List available attacks, for the UI
                AVAILABLE_ATTACK = { 4, 8 },
                AVAILABLE_LINE = { { 0.5, 12 }, { 1, 6 } },
                AVAILABLE_CONE = { { 90, 3 }, { 45, 6 } },
                AVAILABLE_SPLASH = { { 2, 8 }, { 3, 6 } },

                -- Owner
                owner = "Black",
                team = "Enemies",

                -- Flags
                generate_hate = true, -- true if it's a player or it's pet, false for monster and npc
                can_use_cover = true, -- could be false for giant
                waited = false,
                played = false,
                identified = false, -- should be true for player's characters
                on_board = true, -- store if it's on the board or not
                visible = false, -- check if the miniature is visble by at least 1 player

                -- miniature
                guid = nil,
                coordinate = { 20, 20 },

                -- miniature ui
                ui_height = -150,
                ui_scale = 0.25,

                -- battle status
                DECAY = 0,
                REGEN = 0,
                PURSUIT = 0,
                BARRIER = 0,
                CONFUSION = false,
                PARALYSIS = false,

                -- skill
                -- Strength
                ATHLETICS = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = STRENGTH,
                },
                INTIMIDATION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = STRENGTH,
                },
                ENDURANCE = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = STRENGTH,
                },
                DESTRUCTION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = STRENGTH,
                },
                -- Dexterity
                MANIPULATION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = DEXTERITY,
                },
                SECURITY = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = DEXTERITY,
                },
                STEALTH = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = DEXTERITY,
                },
                ACROBATICS = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = DEXTERITY,
                },
                -- INTELLIGENCE
                INVESTIGATION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = INTELLIGENCE,
                },
                TECHNOLOGY = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = INTELLIGENCE,
                },
                MEDIC = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = INTELLIGENCE,
                },
                SCIENCE = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = INTELLIGENCE,
                },
                -- WISDOM
                EMPATHY = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = WISDOM,
                },
                PERCEPTION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = WISDOM,
                },
                SURVIVAL = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = WISDOM,
                },
                CRAFT = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = WISDOM,
                },
                -- CHARISMA
                PERSUASION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = CHARISMA,
                },
                REPRESENTATION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = CHARISMA,
                },
                DECEPTION = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = CHARISMA,
                },
                ANIMAL = {
                    BASE = 0,
                    BONUS = 0,
                    MOD = CHARISMA,
                },
            }
        }

        if data then
            self._data = data
        end

        setmetatable(self, {
            __index = numberedIndex,
            __tostring = function(_)
                return self.toString()
            end,
        })

        ---@return string
        function self.toString()
            return 'Character: ' .. self._data["NAME"]
        end

        ---@return table
        function self.dump()
            return self._data
        end

        -- internal change, doesn't trigger the call to the manager
        -- should only be used by the manager or the manager event
        function self.change(new_data)
            for key, value in pairs(new_data) do
                if type(value) == "table" then
                    for key2, value2 in pairs(value) do
                        -- handle MAX_HP bonus a bit differently, if we increase the max while beeing full hp then increase CURRENT_HP
                        local need_heal = false
                        if key == "MAX_HP" then
                            if self.get("CURRENT_HP") == self.get("MAX_HP") then
                                need_heal = true
                            end
                        end
                        self._data[key][key2] = value2
                        if need_heal then
                            self._data["CURRENT_HP"] = self.get("MAX_HP")
                        end
                    end
                else
                    self._data[key] = value
                end
            end
        end

        -- trigger the manager event
        function self.update(new_data, origin)
            self.change(new_data)
            self.getManager().call("Manager_update", { guid = self.getGUID(), data = new_data, origin = origin })
        end

        function self.getGUID()
            return self._data["guid"]
        end

        function self.getObject()
            return getObjectFromGUID(self.getGUID())
        end

        function self.getManager()
            return Global
        end

        function self.get_mod(key)
            --return math.floor(self.get(key) / 3)
            return math.floor((self.get(key) - 10) / 2)
        end
        function self.get(key)
            if type(self._data[key]) == "table" then
                -- check if we need to sum base and bonus and mod
                if self._data[key]["BASE"] ~= nil then
                    local value = self._data[key]["BASE"]
                    -- if bonus is not nil, then add it
                    if self._data[key]["BONUS"] ~= nil then
                        value = value + self._data[key]["BONUS"]
                    end
                    -- if MOD is nil then add the characteristic's mod
                    if self._data[key]["MOD"] ~= nil then
                        value = value + self.get_mod(self._data[key]["MOD"])
                    end
                    return value
                end
            end
            return self._data[key]
        end

        function self.register()
            self.getManager().call("Manager_register", self.dump())
        end

        function self.getMiniature()
            return getObjectFromGUID(self.getGUID())
        end

        return self
    end,
})

return Character