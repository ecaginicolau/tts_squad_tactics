local list_summable_data = {
    MAX_AMMO, DAMAGE, ACCURACY, RANGE, MAX_HP, MAX_FATE
}

InventoryBoard = {
    zones = {},
    character = nil,
    board_object = nil,
    player_color = nil,
    slot = 1,
}

function InventoryBoard.init()

    for _, characteristic in pairs(Constant.CHARACTERISTICS) do
        table.insert(list_summable_data, characteristic)
    end
    for _, capacity in pairs(Constant.CAPACITIES) do
        table.insert(list_summable_data, capacity)
    end
    for _, defense in pairs(Constant.DEFENSES) do
        table.insert(list_summable_data, defense)
    end
    for _, stat in pairs(Constant.STATS) do
        table.insert(list_summable_data, stat)
    end

    InventoryBoard.create_scripting_zones()

    -- Get player color from note from now
    InventoryBoard.player_color = self.getGMNotes()
    -- find the board
    InventoryBoard.board_object = getObjectsWithTag("board")[1] -- for now let's suppose there is always one board

    -- get the character from the listener
    InventoryBoard.character = Listener.interest

    -- compute armors cards
    InventoryBoard.compute_armors()
end

function InventoryBoard.create_UI()

    local panel = {
        tag = "Panel",
        attributes = {
            scale = "0.1 0.1 0.1",
            position = "0 0 -11",
            rotation = "0 0 180"
        },
        children = {
            {
                tag = "Image",
                attributes = {
                    id = "slot1",
                    position = "-1260 1750 0",
                    image = "equipee",
                    width = 500,
                    height = 200,
                    preserveAspect = true,
                },
                children = {
                    {
                        tag = "Button",
                        attributes = {
                            color = "#00000000",
                            onClick = "InventoryBoard_select(1)"
                        }
                    }
                }
            },
            {
                tag = "Image",
                attributes = {
                    id = "slot2",
                    position = "-420 1750 0",
                    image = "selectionner",
                    width = 500,
                    height = 200,
                    preserveAspect = true,
                },
                children = {
                    {
                        tag = "Button",
                        attributes = {
                            color = "#00000000",
                            onClick = "InventoryBoard_select(2)"
                        }
                    }
                }

            }
        }
    }
    self.UI.setXmlTable({ panel })
end

local zones = {
    scripting_weapon1 = {
        position = Vector.new(1.21, 0.1, -1.25),
        scale = Vector.new(0.84, 0.2, 1.35),
    },
    scripting_weapon2 = {
        position = Vector.new(0.40, 0.1, -1.25),
        scale = Vector.new(0.75, 0.2, 1.35),
    },
    scripting_mod1 = {
        position = Vector.new(1.21, 0.1, 0.73),
        scale = Vector.new(0.84, 0.2, 2.54),
    },
    scripting_mod2 = {
        position = Vector.new(0.40, 0.1, 0.73),
        scale = Vector.new(0.75, 0.2, 2.54),
    },
    scripting_armor = {
        position = Vector.new(-0.826421, 0.1, 0),
        scale = Vector.new(1.68, 0.2, 4.00),
    },
}

function InventoryBoard.create_scripting_zones()
    local scale = self.getScale()[1] --  only need one scale dimension since token can't truly be scaled

    for zone_name, zone_definition in pairs(zones) do
        local position = self.positionToWorld(zone_definition["position"])
        local zone_scale = zone_definition["scale"] * scale
        zone_scale[2] = zone_definition["scale"][2] --  no need to resize this dimension

        local list_obj = getObjectsByName(zone_name .. "_" .. self.getGUID())
        local zone
        if #list_obj >= 1 then
            zone = list_obj[1]
            -- Change position, scale and rotation of the zone
            zone.setPosition(position)
            zone.setScale(zone_scale)
            zone.setRotation(self.getRotation())
            InventoryBoard.zones[zone_name] = zone
            zone.setName(zone_name .. "_" .. self.getGUID())

        else
            zone = spawnObject({
                type = "ScriptingTrigger",
                position = position,
                scale = zone_scale,
                sound = false,
                rotation = self.getRotation(),
                callback_function = function(scripting_zone)
                    InventoryBoard.scripting_zone_callback(scripting_zone, zone_name)
                end
            })
        end
    end
end

function InventoryBoard.scripting_zone_callback(scripting_zone, zone_name)
    -- store information
    InventoryBoard.zones[zone_name] = scripting_zone
    -- give it a name
    scripting_zone.setName(zone_name .. "_" .. self.getGUID())
end

function InventoryBoard.compute_armors()
    local zone_name = "scripting_armor"
    -- if the zone are not initialized yet, just exit
    if InventoryBoard.zones[zone_name] == nil then
        return false
    end
    -- sum all summable data from all armor's cards
    local data_sum = {}
    for _, key in ipairs(list_summable_data) do
        data_sum[key] = { BONUS = 0 }
    end
    -- get the list of cards in the zone
    local list_card = InventoryBoard.zones[zone_name].getObjects()
    -- get the data for every cards
    for _, card_info in ipairs(list_card) do
        local card = getObjectFromGUID(card_info["guid"])
        --local data = card.getTable("data")
        local data = card.call("Inventor_get_data", {})
        if data ~= nil then
            for _, key in ipairs(list_summable_data) do
                if data[key] ~= nil then
                    data_sum[key]["BONUS"] = data_sum[key]["BONUS"] + data[key]
                end
            end

        end
    end

    --for key, value in pairs(data_sum) do
    --    print(key .. " : " .. data_sum[key]["BONUS"])
    --end

    -- send to the miniature if it's linked
    if Listener.interest ~= nil then
        -- Update the character
        InventoryBoard.character.update(data_sum, self.getGUID())
    end
end

function InventoryBoard.compute_weapon(slot)
    local zone_name = "scripting_mod" .. slot
    -- if the zone are not initialized yet, just exit
    if InventoryBoard.zones[zone_name] == nil then
        return false
    end
    -- sum all summable data from all armor's cards
    local mods = {}

    for _, key in ipairs(list_summable_data) do
        mods[key] = 0
    end
    -- Damage type may need to change or be added

    -- get the list of cards in the zone
    local list_card = InventoryBoard.zones[zone_name].getObjects()
    -- get the data for every cards
    for _, card_info in ipairs(list_card) do
        -- the name here is the type of the object
        if card_info.name == "CardCustom" then
            local card = getObjectFromGUID(card_info["guid"])
            local data = card.call("get_data", {})
            if data ~= nil then
                for _, key in ipairs(list_summable_data) do
                    if data[key] ~= nil then
                        mods[key] = mods[key] + data[key]
                    end
                end
                if data["CHANGE_TYPE"] ~= nil then
                    mods["CHANGE_TYPE"] = data["CHANGE_TYPE"]
                end
                if data["ADD_TYPE"] ~= nil then
                    mods["ADD_TYPE"] = data["ADD_TYPE"]
                end
            end
        end
    end

    -- Need to get the weapon in the slot
    local list_weapons = InventoryBoard.zones["scripting_weapon" .. slot].getObjects()
    for _, weapon_info in ipairs(list_weapons) do
        if weapon_info.name == "CardCustom" then
            local weapon = getObjectFromGUID(weapon_info.guid)
            weapon.call("update_mod", mods)
        end
    end

end

function InventoryBoard_select(_, slot)
    InventoryBoard.slot = slot
    self.UI.setAttribute("slot" .. slot, "image", "equipee")
    self.UI.setAttribute("slot" .. (slot % 2) + 1, "image", "selectionner")
end

return InventoryBoard