require("tts_squad_tactics.common.Constant")
require("tts_squad_tactics.common.Utils")
require("tts_squad_tactics.common.Character")
require("tts_squad_tactics.miniature.Animated")
require("tts_squad_tactics.miniature.Miniature")
require("tts_squad_tactics.miniature.MiniatureUI")
require("tts_squad_tactics.listener.Listener")

-- for debug/test
local load_disabled = false

-- Toggle if the data is visible or not
local data_visible = false
--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = { 0, 0, 0 }
--Color information for button background
buttonColor = { 1, 1, 1 }
--Change scale of button (Avoid changing if possible)
local buttonScale = { 0.15, 0.15, 0.15 }
-- Store the link between input count and input name
local input_link = {}
local spawnedInputCount = 0

function updateSave()
    local saved_data = JSON.encode(Miniature.character.dump())
    self.script_state = saved_data
end

-- Events
function onLoad(saved_data)
    local data = {}
    if load_disabled == false and saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        data = loaded_data
    end

    local character = Character()
    character.change(data)
    character.change({ guid = self.getGUID() })

    -- the character listener should only listen to self
    Listener.interest = character

    -- Initialize
    Miniature.setup(character)

    -- Wait a bit to register to manager
    Wait.time(Character_register_to_manager, 0.5)

    -- handle animated setup if needed
    Animated.setup()

    if RandomCharacter ~= nil then
        RandomCharacter.setup()
    end



    -- Get a json dumps of the character data
    local value = JSON.encode_pretty(Miniature.character.dump())

    local funcName = "textbox" .. spawnedInputCount
    local func = function(_, _, val, sel)
        click_textbox("data", val, sel)
    end

    self.setVar(funcName, func)

    self.createInput({
        input_function = funcName,
        function_owner = self,
        label = "",
        alignment = 2, -- Left
        position = { 0.5, 0.1, 8.2 },
        scale = { 0, 0, 0 },
        width = 30000,
        height = 40000,
        font_size = 2000,
        color = buttonColor,
        font_color = buttonFontColor,
        value = value,
        interactable = false
    })
    input_link["data"] = spawnedInputCount
    spawnedInputCount = spawnedInputCount + 1

    -- Add the context menu for edition
    self.addContextMenuItem("Edit", edit)


    self.UI.setXml("")

    Wait.frames(wait_loading_condition, 30)

end

function wait_loading_condition()
    Wait.condition(ui_init, wait_loading, 30)
end



function wait_loading()
    local is_loading = self.UI.loading or self.loading_custom or Global.UI.loading or self.spawning
    --print("wait_loading: " .. tostring(not is_loading))
    return not is_loading
end

function ui_init()
    MiniatureUI.init()
end

function edit()
    data_visible = not data_visible
    -- The input makes the miniature falls... Lock to be able to edit
    self.setLock(data_visible)
    local value = JSON.encode_pretty(Miniature.character.dump())

    if data_visible then
        self.editInput({ index = input_link["data"], scale = buttonScale, value = value })
    else
        self.editInput({ index = input_link["data"], scale = { 0, 0, 0 }, value = value })
    end
end

function onPickUp()
    Animated.onPickUp()
end

function onDrop()
    Animated.onDrop()
end

-- UI
function create_input(name, value, pos, font_size, width)

    local funcName = "textbox" .. spawnedInputCount
    local func = function(_, _, val, sel)
        click_textbox(name, val, sel)
    end
    self.setVar(funcName, func)

    self.createInput({
        input_function = funcName,
        function_owner = self,
        label = name,
        alignment = 2, -- Left
        position = pos,
        scale = buttonScale,
        width = width,
        height = font_size + 24,
        font_size = font_size,
        color = buttonColor,
        font_color = buttonFontColor,
        value = value,
    })
    input_link[name] = spawnedInputCount

    -- increase the button count
    spawnedInputCount = spawnedInputCount + 1
end

--Updates saved value for given text box
function click_textbox(_, value, selected)
    if selected == false then
        local data = JSON.decode(value)
        Miniature.character.update(data, self.getGUID())
        self.setName(Miniature.character.get("NAME"))
        MiniatureUI.update_height()
        updateSave()


    end
end

function walk_start()
    Animated.walk_start()
end

function walk_end()
    Animated.walk_end()
end

function run_start()
    Animated.run_start()
end

function get_data()
    return Miniature.character.dump()
end

function update_data(input_data)
    error("[FORBIDDEN] Miniature update_data " .. self.getGUID())
    -- copy input_data to miniature data
    --for key, value in pairs(input_data) do
    --    -- print(key .. " : " .. tostring(value))
    --    Miniature.data[key] = value
    --end
    --updateSave()
end

function Character_register_to_manager()
    --print("register to manager")
    Miniature.character.register()
    Listener.register()
end
